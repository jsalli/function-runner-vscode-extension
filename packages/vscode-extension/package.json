{
	"name": "function-runner-vscode-extension",
	"displayName": "Function Runner",
	"description": "Function Runner let's you run individual functions from your IDE",
	"version": "0.0.1",
	"engines": {
		"vscode": "^1.82.0"
	},
	"icon": "images/functionrunner-icon.png",
	"publisher": "FunctionRunner",
	"author": {
		"name": "Juha SÃ¤lli",
		"email": "juha@xxx.io"
	},
	"homepage": "https://functionrunner.io/",
	"bugs": {
		"url": "https://github.com/functionrunner-io/vscode-extension/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/functionrunner-io/vscode-extension.git"
	},
	"preview": true,
	"categories": [
		"Other",
		"Testing",
		"Extension Packs"
	],
	"keywords": [
		"unit testing",
		"javascript",
		"Typescript",
		"coverage",
		"jest",
		"run function"
	],
	"activationEvents": [
		"onLanguage:javascript",
		"onLanguage:typescript"
	],
	"main": "./dist/functionRunner.js",
	"contributes": {
		"commands": [
			{
				"command": "functionrunner.clearFunctionRunnerExtensionPreferences",
				"title": "Clear saved Function Runner extension preferences",
				"category": "FunctionRunner"
			},
			{
        "command": "helloworld.helloWorld",
        "title": "Hello World"
      }
		],
		"configuration": [
			{
				"id": "general",
				"title": "General",
				"order": 0,
				"properties": {
					"functionrunner.general.sourceFolder": {
						"type": "string",
						"default": "./src",
						"markdownDescription": "Specifies folder where source files are with relation to project root folder. If source is at root folder set empty string as value like \"\"",
						"scope": "window",
						"order": 10
					}
				}
			},
			{
				"id": "logging",
				"title": "Logging",
				"order": 1,
				"properties": {
					"functionrunner.logging.outputLevel": {
						"type": "string",
						"default": "errors",
						"enum": [
							"silent",
							"errors",
							"verbose",
							"debug"
						],
						"enumDescriptions": [
							"Logs nothing",
							"Logs only errors",
							"Logs all errors, warnings, and messages",
							"Logs all errors, warnings, and messages with extra context useful for debugging"
						],
						"markdownDescription": "Specifies how much (if any) output will be sent to the GitLens output channel",
						"scope": "window",
						"order": 10
					}
				}
			},
			{
				"id": "code-lens",
				"title": "Function Runner Code Lens",
				"order": 11,
				"properties": {
					"functionrunner.codeLens.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide any code lens.",
						"scope": "window",
						"order": 10
					}
				}
			},
			{
				"id": "terminal-options",
				"title": "Terminal Options",
				"order": 2,
				"properties": {
					"functionrunner.terminalOptions.windowsTerminalType": {
						"type": "string",
						"default": "powerShell",
						"markdownDescription": "Specify the Windows terminal to use",
						"enum": [
							"powerShell",
							"bashKind",
							"cmd"
						],
						"enumDescriptions": [
							"Your system uses Windows PowerShell to run commands",
							"Your system uses Bash kind terminal to run commands",
							"Your system uses Windows CMD to run commands"
						],
						"scope": "window",
						"order": 11
					},
					"functionrunner.terminalOptions.windowsTerminalExecutablePath": {
						"type": "string",
						"default": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
						"markdownDescription": "Specify absolutepath to the terminal executable",
						"scope": "window",
						"order": 12
					},
					"functionrunner.terminalOptions.linuxTerminalType": {
						"type": "string",
						"default": "bash",
						"markdownDescription": "Specify terminal to use in Linux",
						"enum": [
							"bash",
							"sh"
						],
						"enumDescriptions": [
							"Your system uses Bash to run commands",
							"Your system uses Bourne (sh) to run commands"
						],
						"scope": "window",
						"order": 13
					},
					"functionrunner.terminalOptions.linuxTerminalExecutablePath": {
						"type": "string",
						"default": "",
						"markdownDescription": "Specify absolutepath to the terminal executable or empty string if your default shell is supported",
						"scope": "window",
						"order": 14
					},
					"functionrunner.terminalOptions.macTerminalType": {
						"type": "string",
						"default": "zsh",
						"markdownDescription": "Specify terminal to use in Mac",
						"enum": [
							"zsh",
							"bash"
						],
						"enumDescriptions": [
							"Your system uses zsh to run commands",
							"Your system uses Bash to run commands"
						],
						"scope": "window",
						"order": 13
					},
					"functionrunner.terminalOptions.macTerminalExecutablePath": {
						"type": "string",
						"default": "",
						"markdownDescription": "Specify absolutepath to the terminal executable or empty string if your default shell is supported",
						"scope": "window",
						"order": 14
					}
				}
			},
			{
				"id": "javascript-run-options",
				"title": "Javascript Run Options",
				"order": 1,
				"properties": {
					"functionrunner.javascriptRunOptions.commonPreExecutable": {
						"type": "string",
						"default": "",
						"markdownDescription": "Specifies things to add to the terminal execution command before the 'functionrunner.runOptions.executable'",
						"scope": "window",
						"order": 3
					},
					"functionrunner.javascriptRunOptions.envVarsWhenESModule": {
						"type": "object",
						"default": {
							"NODE_OPTIONS": "--no-warnings --experimental-specifier-resolution=node --input-type module"
						},
						"markdownDescription": "Specifies environmental variables for when running ES module. Available variables are 'sourceFileDirAbsPath', 'tsConfigJsonFileAbsPath', 'tsNodeInstallationPath'. Surround vars with '{{' and '}}'",
						"scope": "window",
						"order": 5
					},
					"functionrunner.javascriptRunOptions.envVarsWhenCommonJS": {
						"type": "object",
						"default": {
							"NODE_OPTIONS": "--no-warnings --experimental-specifier-resolution=node"
						},
						"markdownDescription": "Specifies environmental variables for when running CommonJS module. Available variables are 'sourceFileDirAbsPath' and 'tsConfigJsonFileAbsPath'. Surround vars with '{{' and '}}'",
						"scope": "window",
						"order": 8
					},
					"functionrunner.javascriptRunOptions.socketPort": {
						"type": "number",
						"default": 7123,
						"markdownDescription": "Specifies port for socket communication between extension and user's instrumented code running in an child process.",
						"scope": "window",
						"order": 15
					}
				}
			},
			{
				"id": "typescript-run-options",
				"title": "Typescript Run Options",
				"order": 1,
				"properties": {
					"functionrunner.typescriptRunOptions.commonPreExecutable": {
						"type": "string",
						"default": "",
						"markdownDescription": "Specifies things to add to the terminal execution command before the 'functionrunner.runOptions.executable'",
						"scope": "window",
						"order": 3
					},
					"functionrunner.typescriptRunOptions.envVarsWhenESModule": {
						"type": "object",
						"default": {
							"NODE_OPTIONS": "--no-warnings --experimental-specifier-resolution=node --loader {{tsNodeInstallationPath}}ts-node/esm/transpile-only.mjs --input-type module",
							"TS_NODE_TRANSPILE_ONLY": "true",
							"TS_NODE_PROJECT": "{{tsConfigJsonFileAbsPath}}",
							"TS_NODE_CWD": "{{sourceFileDirAbsPath}}"
						},
						"markdownDescription": "Specifies environmental variables for when running ES module. Available variables are 'sourceFileDirAbsPath', 'tsConfigJsonFileAbsPath', 'tsNodeInstallationPath'. Surround vars with '{{' and '}}'",
						"scope": "window",
						"order": 5
					},
					"functionrunner.typescriptRunOptions.envVarsWhenCommonJS": {
						"type": "object",
						"default": {
							"NODE_OPTIONS": "--no-warnings --experimental-specifier-resolution=node -r {{tsNodeInstallationPath}}ts-node/register/index.js",
							"TS_NODE_TRANSPILE_ONLY": "true",
							"TS_NODE_PROJECT": "{{tsConfigJsonFileAbsPath}}",
							"TS_NODE_CWD": "{{sourceFileDirAbsPath}}"
						},
						"markdownDescription": "Specifies environmental variables for when running CommonJS module. Available variables are 'sourceFileDirAbsPath' and 'tsConfigJsonFileAbsPath'. Surround vars with '{{' and '}}'",
						"scope": "window",
						"order": 8
					},
					"functionrunner.typescriptRunOptions.tsconfigRelPath": {
						"type": "string",
						"default": "./tsconfig.json",
						"markdownDescription": "Specify relative path to tsconfig-file in relation to project's root path and the name of the file",
						"scope": "window",
						"order": 10
					},
					"functionrunner.typescriptRunOptions.socketPort": {
						"type": "number",
						"default": 7123,
						"markdownDescription": "Specifies port for socket communication between extension and user's instrumented code running in an child process.",
						"scope": "window",
						"order": 15
					}
				}
			},
			{
				"id": "telemetry",
				"title": "Telemetry",
				"order": 10,
				"properties": {
					"functionrunner.telemetry.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to send telemetry data or not",
						"scope": "window",
						"order": 1
					}
				}
			}
		],
		"languages": [
			{
				"id": "functionrunner-vscode-extension-output",
				"mimetypes": [
					"text/x-code-output"
				]
			}
		],
		"grammars": [
			{
				"language": "functionrunner-vscode-extension-output",
				"scopeName": "functionrunner-vscode-extension.output",
				"path": "./syntaxes/functionrunner-vscode-extension-output.tmLanguage"
			}
		]
	},
	"scripts": {
		"clean": "rimraf ./dist/* tsconfig.tsbuildinfo package.tgz *.log .swc/* .eslintcache* tsconfig*.tsbuildinfo",
		"compile": "rushx clean && tsc -p tsconfig.json",
		"build": "rushx compile",
		"build-types": "tsc -p tsconfig.build.types.json",
		"pretest-webpack": "rimraf ./out/* && webpack -c webpack.config.test.js --env useSwcBuild",
		"test-dev": "pnpm bundle-dependencies && pnpm bundle-extension-dev && pnpm pretest-webpack && node ./out/test/runTest.js",
		"test-e2e": "pnpm pretest-webpack && node ./out/test/runTest.js",
		"test-e2e-multiple-setups": "pnpm pretest-webpack && node ./out/test/runTestForMultipleSetups.js",
		"test-unit": "jest",
		"bundle-extension-dev": "webpack --mode development --env useSwcBuild",
		"bundle-extension-prod": "webpack --mode production --env useSwcBuild",
		"watch": "webpack --watch --mode development",
		"watch-child-process-breakpoints": "webpack --watch --mode development --env childProcessBreakpoints",
		"lint": "eslint src/**/*.ts",
		"up-dependencies": "pnpm up",
		"bundle-dependencies": "rush bundle-stripped-down-ts-node",
		"package-extension-dev": "pnpm clean && pnpm bundle-dependencies && pnpm bundle-extension-dev && vsce package --no-dependencies --out publish/",
		"package-extension-prod": "pnpm clean && pnpm bundle-dependencies && pnpm bundle-extension-prod && vsce package --no-dependencies --out publish/",
		"publish-extension": "vsce publish --no-dependencies --packagePath"
	},
	"dependencies": {
		"reflect-metadata": "0.2.2",
		"tsyringe": "4.8.0",
		"@functionrunner/javascript-typescript-handler": "workspace:1.0.0",
		"@functionrunner/python-handler": "workspace:1.0.0",
		"@functionrunner/shared": "workspace:1.0.0",
		"serialize-error": "8.1.0",
		"p-locate": "6.0.0",
		"fs-extra": "11.2.0",
		"find-up": "7.0.0"
	},
	"devDependencies": {
		"@swc/cli": "0.4.0",
		"@swc/core": "1.7.23",
		"swc-loader": "0.2.6",
		"@types/fs-extra": "11.0.4",
		"@types/node": "22.5.2",
		"@types/vscode": "1.82.0",
		"@typescript-eslint/eslint-plugin": "8.4.0",
		"@typescript-eslint/parser": "8.4.0",
		"clean-webpack-plugin": "4.0.0",
		"copy-webpack-plugin": "12.0.2",
		"eslint": "9.9.1",
		"eslint-cli": "1.1.1",
		"eslint-config-prettier": "9.1.0",
		"eslint-plugin-prettier": "5.2.1",
		"eslint-import-resolver-typescript": "3.6.3",
		"eslint-plugin-anti-trojan-source": "1.1.1",
		"json5": "2.2.3",
		"prettier": "3.3.3",
		"rimraf": "6.0.1",
		"ts-loader": "9.5.1",
		"ts-node": "10.9.2",
		"vsce": "2.15.0",
		"webpack": "5.94.0",
		"webpack-bundle-analyzer": "4.10.2",
		"@types/webpack-bundle-analyzer": "4.7.0",
		"webpack-cli": "5.1.4",
		"@vscode/test-electron": "2.4.1",
		"mocha": "10.7.3",
		"@types/mocha": "10.0.7",
		"glob": "11.0.0",
		"@types/glob": "8.1.0",
		"@types/chai-as-promised": "8.0.0",
		"chai": "5.1.1",
		"chai-as-promised": "8.0.0",
		"typescript": "5.5.4",
		"tslib": "2.7.0",
		"jest": "29.7.0",
		"@types/jest": "29.5.12",
		"@babel/core": "7.25.2",
		"@babel/preset-env": "7.25.4",
		"@babel/preset-typescript": "7.24.7",
		"babel-jest": "29.7.0",
		"babel-plugin-module-resolver": "5.0.2"
	}
}
